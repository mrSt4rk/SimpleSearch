import Head from 'next/head'
import axios from 'axios';
import Search from '../components/Search';
import { useState, useEffect } from 'react';
import List from '../components/List';
import Router, { useRouter } from "next/router";
import Dropdwn from '../components/Dropdown';
import Toggle from '../components/Toggle';
import { Button, Icon } from 'semantic-ui-react';


const Home = () => {
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [yearState, setYearState] = useState(0);
  const [filterCounter, setFilterCounter] = useState(0);
  const [status, setStatus] = useState(true);
  const [popularityState, setPopularityState] = useState();
  const [filters, setFilters] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const router = useRouter();


  useEffect(() => {
    filterCounter === 0 && setStatus(true);
  }, [filterCounter]);


  useEffect(() => {
    if (Object.values(router.query).length !== 0) {
      onSearchTerm(router.query.q);
      setSearchTerm(router.query.q);
    }
  }, [router.query]);



  const onSearchTerm = (term) => {
    if (term != '') {
      setLoading(true);
      term = router.query?.q ? router.query.q : term;
      axios.get(`https://api.themoviedb.org/3/search/movie?api_key=77f379de342615d6f19633af4227e2f4&query=${term}`).then(res => {
        const arr = [];
        arr.push(res.data.results);
        setResults(arr);
        setLoading(false);
      });
    }



  }


  const undoFilters = () => {

    setFilterCounter(prevFilterCounter => prevFilterCounter - 1);


    if (filters.length !== 0) {
      let lastItem = filters.pop()
      let temp = filters;
      lastItem.y && lastItem.pop ? Router.push(`?y=${lastItem.y}&pop=${lastItem.pop}`) : lastItem.pop ? Router.push(`?pop=${lastItem.pop}`) : Router.push(`?y=${lastItem.y}`);
      setPopularityState(lastItem.pop);
      setYearState(lastItem.y);
      onFilterSearch(lastItem.pop, lastItem.y);
      setFilters(temp);
    } else if (filters.length === 1) {
      setStatus(true);
    } else {
      setStatus(true);
    }


  }

  const onFilterSearch = (popularity, year) => {
    const filtersTemp = [];
    setFilterCounter(prevFilterCounter => prevFilterCounter + 1);
    setStatus(false);
    setLoading(true);
    const pop = popularity !== 0 && popularity !== '' ? (popularity === true || popularity === 'popularity_asc' ? 'popularity_asc' : 'popularity_desc') : '';
    setPopularityState(pop);
    setYearState(year);
    let temp = {};
    (year !== 0 && pop !== '') ? (Router.push(`?y=${year}&pop=${pop}`), temp.y = year, temp.pop = pop) : (pop !== '' && year === 0) ? (Router.push(`?pop=${pop}`), temp.pop = pop) : year !== 0 ? (Router.push(`?y=${year}`), temp.y = year) : '';

    filtersTemp.push(temp);
    setFilters([...filters, ...filtersTemp]);
    axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=77f379de342615d6f19633af4227e2f4&year=${year}&sort_by=${pop}`).then(res => {
      const arr = [];
      arr.push(res.data.results);
      setResults(arr);
      setLoading(false);
    });
  }




  return (
    <>
      <Head>
        <title>Simple Movie Search</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="container mx-auto flex flex-col justify-center items-center content-center w-full pt-10">
        <Search onSearch={data => onSearchTerm(data)} value={searchTerm} />
        <div className="flex flex-row justify-around items-center w-2/3 mt-24">
          <Dropdwn onDropdownFilter={data => onFilterSearch(popularityState, data)} selectedItem={yearState} />
          <Toggle onToggle={data => onFilterSearch(data, yearState)} value={popularityState} />

          <Button basic color="teal" icon labelPosition='left' disabled={status} onClick={e => undoFilters()}>
            Back
            <Icon name='left arrow' />
          </Button>
        </div>
        <List results={results} loading={loading} />
      </div>

    </>
  )
}







export default Home;
